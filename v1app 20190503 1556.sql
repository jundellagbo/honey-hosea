--
-- Script was generated by Devart dbForge Studio 2019 for MySQL, Version 8.1.22.0
-- Product home page: http://www.devart.com/dbforge/mysql/studio
-- Script date 5/3/2019 3:56:48 PM
-- Server version: 5.5.5-10.1.38-MariaDB
-- Client version: 4.1
--

-- 
-- Disable foreign keys
-- 
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;

-- 
-- Set SQL mode
-- 
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;

-- 
-- Set character set the client will use to send SQL statements to the server
--
SET NAMES 'utf8';

--
-- Set default database
--
USE v1app;

--
-- Drop procedure `sp_requirements_retrieve`
--
DROP PROCEDURE IF EXISTS sp_requirements_retrieve;

--
-- Drop procedure `sp_user_login`
--
DROP PROCEDURE IF EXISTS sp_user_login;

--
-- Drop procedure `sp_user_retrieve`
--
DROP PROCEDURE IF EXISTS sp_user_retrieve;

--
-- Drop procedure `sp_class_books_pricing`
--
DROP PROCEDURE IF EXISTS sp_class_books_pricing;

--
-- Drop procedure `sp_class_remove`
--
DROP PROCEDURE IF EXISTS sp_class_remove;

--
-- Drop procedure `sp_class_retrieve`
--
DROP PROCEDURE IF EXISTS sp_class_retrieve;

--
-- Drop procedure `sp_class_store`
--
DROP PROCEDURE IF EXISTS sp_class_store;

--
-- Drop procedure `sp_enroll_student`
--
DROP PROCEDURE IF EXISTS sp_enroll_student;

--
-- Drop procedure `sp_statement_of_account`
--
DROP PROCEDURE IF EXISTS sp_statement_of_account;

--
-- Drop procedure `sp_statement_related`
--
DROP PROCEDURE IF EXISTS sp_statement_related;

--
-- Drop table `classes`
--
DROP TABLE IF EXISTS classes;

--
-- Drop procedure `sp_section_remove`
--
DROP PROCEDURE IF EXISTS sp_section_remove;

--
-- Drop procedure `sp_section_retrieve`
--
DROP PROCEDURE IF EXISTS sp_section_retrieve;

--
-- Drop procedure `sp_section_store`
--
DROP PROCEDURE IF EXISTS sp_section_store;

--
-- Drop table `sections`
--
DROP TABLE IF EXISTS sections;

--
-- Drop procedure `sp_enroll`
--
DROP PROCEDURE IF EXISTS sp_enroll;

--
-- Drop procedure `sp_enrollment_retrieve`
--
DROP PROCEDURE IF EXISTS sp_enrollment_retrieve;

--
-- Drop table `enrollment`
--
DROP TABLE IF EXISTS enrollment;

--
-- Drop procedure `sp_payment_pay`
--
DROP PROCEDURE IF EXISTS sp_payment_pay;

--
-- Drop procedure `sp_payment_store`
--
DROP PROCEDURE IF EXISTS sp_payment_store;

--
-- Drop procedure `sp_payments_retrieve`
--
DROP PROCEDURE IF EXISTS sp_payments_retrieve;

--
-- Drop table `payments`
--
DROP TABLE IF EXISTS payments;

--
-- Drop procedure `sp_pricing_get`
--
DROP PROCEDURE IF EXISTS sp_pricing_get;

--
-- Drop procedure `sp_pricing_set`
--
DROP PROCEDURE IF EXISTS sp_pricing_set;

--
-- Drop table `pricing`
--
DROP TABLE IF EXISTS pricing;

--
-- Drop procedure `sp_meta_remove`
--
DROP PROCEDURE IF EXISTS sp_meta_remove;

--
-- Drop procedure `sp_meta_retrieve`
--
DROP PROCEDURE IF EXISTS sp_meta_retrieve;

--
-- Drop procedure `sp_meta_store`
--
DROP PROCEDURE IF EXISTS sp_meta_store;

--
-- Drop table `metas`
--
DROP TABLE IF EXISTS metas;

--
-- Drop procedure `sp_records_remove`
--
DROP PROCEDURE IF EXISTS sp_records_remove;

--
-- Drop procedure `sp_records_retrieve`
--
DROP PROCEDURE IF EXISTS sp_records_retrieve;

--
-- Drop procedure `sp_records_store`
--
DROP PROCEDURE IF EXISTS sp_records_store;

--
-- Drop table `records`
--
DROP TABLE IF EXISTS records;

--
-- Drop procedure `sp_requirements_remove`
--
DROP PROCEDURE IF EXISTS sp_requirements_remove;

--
-- Drop procedure `sp_requirements_store`
--
DROP PROCEDURE IF EXISTS sp_requirements_store;

--
-- Drop table `requirements`
--
DROP TABLE IF EXISTS requirements;

--
-- Drop view `studentsview`
--
DROP VIEW IF EXISTS studentsview CASCADE;

--
-- Drop procedure `sp_students_get`
--
DROP PROCEDURE IF EXISTS sp_students_get;

--
-- Drop procedure `sp_students_store`
--
DROP PROCEDURE IF EXISTS sp_students_store;

--
-- Drop function `studentid_generator`
--
DROP FUNCTION IF EXISTS studentid_generator;

--
-- Drop table `students`
--
DROP TABLE IF EXISTS students;

--
-- Drop procedure `sp_transaction_get`
--
DROP PROCEDURE IF EXISTS sp_transaction_get;

--
-- Drop procedure `sp_transaction_store`
--
DROP PROCEDURE IF EXISTS sp_transaction_store;

--
-- Drop function `transaction_no_generator`
--
DROP FUNCTION IF EXISTS transaction_no_generator;

--
-- Drop table `transactions`
--
DROP TABLE IF EXISTS transactions;

--
-- Drop procedure `sp_user_authenticated`
--
DROP PROCEDURE IF EXISTS sp_user_authenticated;

--
-- Drop view `usersession`
--
DROP VIEW IF EXISTS usersession CASCADE;

--
-- Drop procedure `sp_user_store`
--
DROP PROCEDURE IF EXISTS sp_user_store;

--
-- Drop function `check_username`
--
DROP FUNCTION IF EXISTS check_username;

--
-- Drop table `users`
--
DROP TABLE IF EXISTS users;

--
-- Set default database
--
USE v1app;

--
-- Create table `users`
--
CREATE TABLE users (
  id INT(11) NOT NULL AUTO_INCREMENT,
  fname VARCHAR(50) NOT NULL,
  mname VARCHAR(50) NOT NULL,
  lname VARCHAR(50) NOT NULL,
  username VARCHAR(50) NOT NULL,
  password LONGTEXT NOT NULL,
  role INT(11) NOT NULL,
  status INT(11) DEFAULT NULL,
  PRIMARY KEY (id)
)
ENGINE = INNODB,
AUTO_INCREMENT = 27,
AVG_ROW_LENGTH = 8192,
CHARACTER SET utf8,
COLLATE utf8_general_ci;

DELIMITER $$

--
-- Create function `check_username`
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION check_username(`username` VARCHAR(50))
  RETURNS int(11)
BEGIN
  IF EXISTS( SELECT
    *
  FROM users a
  WHERE a.username = username) THEN
  RETURN 1;
  ELSE
  RETURN 0;
  END IF;
END
$$

--
-- Create procedure `sp_user_store`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE sp_user_store( id INT, fname varchar(50), mname varchar(50), lname varchar(50), username varchar(50), password LONGTEXT, role INT, status INT )
BEGIN
  IF( EXISTS( SELECT
    *
  FROM users a
  WHERE a.username = username
  AND a.password = MD5(password))) THEN
SELECT
  1 AS existing_user;
ELSE
  IF( id ) THEN
UPDATE users a
SET a.fname = fname,
    a.mname = mname,
    a.lname = lname,
    a.username = username,
    a.password = IF(password != '', MD5(password), a.password),
    a.role = role,
    a.status = status
WHERE a.id = id;
SELECT
  id AS id;
ELSE
INSERT INTO users
  VALUES (0, fname, mname, lname, username, MD5(password), role, status);
SELECT
  LAST_INSERT_ID() AS id;
END IF;
END IF;
END
$$

DELIMITER ;

--
-- Create view `usersession`
--
CREATE 
	DEFINER = 'root'@'localhost'
VIEW usersession
AS
SELECT
  `a`.`id` AS `id`,
  `a`.`fname` AS `fname`,
  `a`.`mname` AS `mname`,
  `a`.`lname` AS `lname`,
  `a`.`username` AS `username`,
  `a`.`role` AS `role`,
  `a`.`password` AS `password`,
  MD5(`a`.`id`) AS `sessionid`,
  `a`.`status` AS `status`
FROM `users` `a`;

DELIMITER $$

--
-- Create procedure `sp_user_authenticated`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE sp_user_authenticated( IN token varchar(225) )
BEGIN


SELECT
  a.id,
  a.fname,
  a.mname,
  a.lname,
  a.username,
  a.role,
  a.sessionid
FROM usersession a
WHERE a.sessionid = token;

END
$$

DELIMITER ;

--
-- Create table `transactions`
--
CREATE TABLE transactions (
  id INT(11) NOT NULL AUTO_INCREMENT,
  enrollmentid INT(11) DEFAULT NULL,
  transactions LONGTEXT DEFAULT NULL,
  payer VARCHAR(50) DEFAULT NULL,
  payor VARCHAR(50) DEFAULT NULL,
  date_transac DATETIME DEFAULT NULL,
  transac_code LONGTEXT DEFAULT NULL,
  PRIMARY KEY (id)
)
ENGINE = INNODB,
AUTO_INCREMENT = 51,
CHARACTER SET latin1,
COLLATE latin1_swedish_ci;

DELIMITER $$

--
-- Create function `transaction_no_generator`
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION transaction_no_generator()
  RETURNS varchar(50) CHARSET latin1
BEGIN
    DECLARE ret varchar(50);
SELECT
  a.id INTO ret
FROM transactions a
ORDER BY id DESC LIMIT 1;
    IF( ret IS NULL ) THEN
SELECT
  AUTO_INCREMENT INTO ret
FROM information_schema.TABLES
WHERE TABLE_NAME = "transactions"
ORDER BY AUTO_INCREMENT DESC LIMIT 1;
ELSE
    SET ret = ret + 1;
    END IF;
    RETURN CONCAT(EXTRACT(YEAR FROM CURDATE()), EXTRACT(HOUR FROM CURDATE()), EXTRACT(SECOND FROM CURDATE()), EXTRACT(MONTH FROM CURDATE()), EXTRACT(DAY FROM CURDATE()), ret);
    END
$$

--
-- Create procedure `sp_transaction_store`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE sp_transaction_store( eid INT, transactions LONGTEXT, payer varchar(50), payor varchar(50) )
BEGIN
INSERT INTO transactions
  VALUES (0, eid, transactions, payer, payor, NOW(), transaction_no_generator());
SELECT
  *
FROM transactions
WHERE id = LAST_INSERT_ID();
END
$$

--
-- Create procedure `sp_transaction_get`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE sp_transaction_get( eid INT )
BEGIN
SELECT
  *
FROM transactions a
WHERE a.enrollmentid = eid;
END
$$

DELIMITER ;

--
-- Create table `students`
--
CREATE TABLE students (
  id INT(11) NOT NULL AUTO_INCREMENT,
  studentsid VARCHAR(50) NOT NULL,
  fname VARCHAR(50) NOT NULL,
  mname VARCHAR(50) NOT NULL,
  lname VARCHAR(50) NOT NULL,
  extension VARCHAR(50) DEFAULT NULL,
  dateofbirth DATE NOT NULL,
  sex VARCHAR(6) NOT NULL,
  street VARCHAR(225) NOT NULL,
  barangay VARCHAR(225) NOT NULL,
  city VARCHAR(255) NOT NULL,
  zip VARCHAR(30) NOT NULL,
  gname VARCHAR(50) NOT NULL,
  gmname VARCHAR(50) NOT NULL,
  glname VARCHAR(50) NOT NULL,
  tel VARCHAR(50) NOT NULL,
  cel VARCHAR(50) NOT NULL,
  status INT(11) NOT NULL DEFAULT 1,
  PRIMARY KEY (id)
)
ENGINE = INNODB,
AUTO_INCREMENT = 194,
AVG_ROW_LENGTH = 5461,
CHARACTER SET utf8,
COLLATE utf8_general_ci;

DELIMITER $$

--
-- Create function `studentid_generator`
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION studentid_generator()
  RETURNS varchar(50) CHARSET utf8
BEGIN
DECLARE ret varchar(50);
SELECT
  a.id INTO ret
FROM students a
ORDER BY id DESC LIMIT 1;
IF( ret IS NULL ) THEN
SELECT
  AUTO_INCREMENT INTO ret
FROM information_schema.TABLES
WHERE TABLE_NAME = "students"
ORDER BY AUTO_INCREMENT DESC LIMIT 1;
ELSE
SET ret = ret + 1;
END IF;
RETURN CONCAT(EXTRACT(YEAR FROM CURDATE()), EXTRACT(MONTH FROM CURDATE()), EXTRACT(DAY FROM CURDATE()), ret);
END
$$

--
-- Create procedure `sp_students_store`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE sp_students_store(
    id INT,
    fname varchar(50),
    mname varchar(50),
    lname varchar(50),
    extension varchar(50),
    dateofbirth DATE,
    sex varchar(6),
    street varchar(50),
    barangay varchar(50),
    city varchar(50),
    zip varchar(50),
    gname varchar(50),
    gmname varchar(50),
    glname varchar(50),
    tel varchar(50),
    cel varchar(50),
  status int
  )
BEGIN
  IF( id ) THEN
UPDATE students a
SET a.fname = fname,
    a.mname = mname,
    a.lname = lname,
    a.extension = extension,
    a.dateofbirth = dateofbirth,
    a.sex = sex,
    a.street = street,
    a.barangay = barangay,
    a.city = city,
    a.zip = zip,
    a.gname = gname,
    a.gmname = gmname,
    a.glname = glname,
    a.tel = tel,
    a.cel = cel,
    a.status = status
WHERE a.id = id;
SELECT
  id;
ELSE
INSERT INTO students
  VALUES (NULL, studentid_generator(), fname, mname, lname, extension, dateofbirth, sex, street, barangay, city, zip, gname, gmname, glname, tel, cel, status);
SELECT
  LAST_INSERT_ID() AS id,
  CONCAT(EXTRACT(year FROM CURDATE()), EXTRACT(MONTH FROM CURDATE()), EXTRACT(DAY FROM CURDATE()), LAST_INSERT_ID()) AS studentsid;
END IF;
END
$$

--
-- Create procedure `sp_students_get`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE sp_students_get()
BEGIN
SELECT
  *
FROM students;
END
$$

DELIMITER ;

--
-- Create view `studentsview`
--
CREATE 
	DEFINER = 'root'@'localhost'
VIEW studentsview
AS
SELECT
  `a`.`id` AS `id`,
  `a`.`studentsid` AS `studentsid`,
  `a`.`fname` AS `fname`,
  `a`.`mname` AS `mname`,
  `a`.`lname` AS `lname`,
  `a`.`extension` AS `extension`,
  `a`.`dateofbirth` AS `dateofbirth`,
  `a`.`sex` AS `sex`,
  `a`.`street` AS `street`,
  `a`.`barangay` AS `barangay`,
  `a`.`city` AS `city`,
  `a`.`zip` AS `zip`,
  `a`.`gname` AS `gname`,
  `a`.`gmname` AS `gmname`,
  `a`.`glname` AS `glname`,
  `a`.`tel` AS `tel`,
  `a`.`cel` AS `cel`,
  `a`.`status` AS `status`,
  FLOOR(((TO_DAYS(CURDATE()) - TO_DAYS(`a`.`dateofbirth`)) / 365.25)) AS `age`
FROM `students` `a`;

--
-- Create table `requirements`
--
CREATE TABLE requirements (
  id INT(11) NOT NULL AUTO_INCREMENT,
  requirement VARCHAR(50) DEFAULT NULL,
  status INT(11) DEFAULT NULL,
  studentsid INT(11) DEFAULT NULL,
  PRIMARY KEY (id)
)
ENGINE = INNODB,
AUTO_INCREMENT = 388,
AVG_ROW_LENGTH = 4096,
CHARACTER SET latin1,
COLLATE latin1_swedish_ci;

DELIMITER $$

--
-- Create procedure `sp_requirements_store`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE sp_requirements_store(
    id INT,
    requirement varchar(50),
    studentsid INT,
    status INT
  )
BEGIN
IF( id ) THEN
UPDATE requirements a
SET a.requirement = requirement,
    a.status = status
WHERE a.id = id;
SELECT
  id;
ELSE
INSERT INTO requirements
  VALUES (NULL, requirement, status, studentsid);
SELECT
  LAST_INSERT_ID() AS id;
END IF;
END
$$

--
-- Create procedure `sp_requirements_remove`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE sp_requirements_remove( sid INT )
BEGIN
DELETE
  FROM requirements
WHERE id = sid;
END
$$

DELIMITER ;

--
-- Create table `records`
--
CREATE TABLE records (
  id INT(11) NOT NULL AUTO_INCREMENT,
  studentsid INT(11) DEFAULT NULL,
  records LONGTEXT DEFAULT NULL,
  PRIMARY KEY (id)
)
ENGINE = INNODB,
CHARACTER SET latin1,
COLLATE latin1_swedish_ci;

DELIMITER $$

--
-- Create procedure `sp_records_store`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE sp_records_store( id INT, studentsid INT, records LONGTEXT )
BEGIN
  IF( id ) THEN
UPDATE records a
SET a.records = records
WHERE a.id = id;
SELECT
  id;
ELSE
INSERT INTO records
  VALUES (0, studentsid, records);
SELECT
  LAST_INSERT_ID() AS id;
END IF;
END
$$

--
-- Create procedure `sp_records_retrieve`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE sp_records_retrieve( sid INT )
BEGIN
SELECT
  *
FROM records a
WHERE a.studentsid = sid;
END
$$

--
-- Create procedure `sp_records_remove`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE sp_records_remove( rid INT )
BEGIN
DELETE
  FROM records
WHERE id = rid;
END
$$

DELIMITER ;

--
-- Create table `metas`
--
CREATE TABLE metas (
  id INT(11) NOT NULL AUTO_INCREMENT,
  metaname VARCHAR(50) DEFAULT NULL,
  metakey INT(11) DEFAULT 0,
  metatype VARCHAR(50) DEFAULT NULL,
  PRIMARY KEY (id)
)
ENGINE = INNODB,
AUTO_INCREMENT = 61,
AVG_ROW_LENGTH = 1489,
CHARACTER SET latin1,
COLLATE latin1_swedish_ci;

DELIMITER $$

--
-- Create procedure `sp_meta_store`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE sp_meta_store( id INT, metaname varchar(50), metakey INT, metatype varchar( 50 ) )
BEGIN
  IF( id ) THEN
UPDATE metas a
SET a.metaname = metaname,
    a.metakey = metakey
WHERE a.id = id;
SELECT
  id;
ELSE
INSERT INTO metas
  VALUES (0, metaname, metakey, metatype);
SELECT
  LAST_INSERT_ID() AS id;
END IF;
END
$$

--
-- Create procedure `sp_meta_retrieve`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE sp_meta_retrieve( metatype varchar( 50 ) )
BEGIN
SELECT
  *
FROM metas a
WHERE a.metatype = metatype;
END
$$

--
-- Create procedure `sp_meta_remove`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE sp_meta_remove( metaid INT )
BEGIN
DELETE
  FROM metas
WHERE id = metaid;
END
$$

DELIMITER ;

--
-- Create table `pricing`
--
CREATE TABLE pricing (
  id INT(11) NOT NULL AUTO_INCREMENT,
  payment VARCHAR(50) NOT NULL,
  price FLOAT NOT NULL,
  discount FLOAT DEFAULT NULL,
  availability VARCHAR(50) DEFAULT NULL,
  other LONGTEXT DEFAULT NULL,
  PRIMARY KEY (id)
)
ENGINE = INNODB,
AUTO_INCREMENT = 3,
AVG_ROW_LENGTH = 8192,
CHARACTER SET latin1,
COLLATE latin1_swedish_ci;

DELIMITER $$

--
-- Create procedure `sp_pricing_set`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE sp_pricing_set( id INT, price FLOAT, discount FLOAT, availability varchar(50), other LONGTEXT)
BEGIN
UPDATE pricing a
SET a.price = price,
    a.discount = discount,
    a.availability = availability,
    a.other = other
WHERE a.id = id;
SELECT
  1;
END
$$

--
-- Create procedure `sp_pricing_get`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE sp_pricing_get( pid INT )
BEGIN
SELECT
  *
FROM pricing a
WHERE a.id = pid;
END
$$

DELIMITER ;

--
-- Create table `payments`
--
CREATE TABLE payments (
  id INT(11) NOT NULL AUTO_INCREMENT,
  enrollmentid INT(11) DEFAULT NULL,
  payment VARCHAR(50) DEFAULT NULL,
  value FLOAT DEFAULT NULL,
  discount FLOAT DEFAULT NULL,
  availability VARCHAR(50) DEFAULT NULL,
  balance FLOAT DEFAULT NULL,
  PRIMARY KEY (id)
)
ENGINE = INNODB,
AUTO_INCREMENT = 56,
AVG_ROW_LENGTH = 5461,
CHARACTER SET latin1,
COLLATE latin1_swedish_ci;

DELIMITER $$

--
-- Create procedure `sp_payments_retrieve`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE sp_payments_retrieve( eid INT )
BEGIN
SELECT
  *
FROM payments a
WHERE a.enrollmentid = eid;
END
$$

--
-- Create procedure `sp_payment_store`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE sp_payment_store( eid INT, payment varchar(50), value FLOAT )
BEGIN
INSERT INTO payments
  VALUES (0, eid, payment, value, 0, '', value);
SELECT
  *
FROM payments a
WHERE a.id = LAST_INSERT_ID();
END
$$

--
-- Create procedure `sp_payment_pay`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE sp_payment_pay( pid INT, balance FLOAT )
BEGIN
UPDATE payments a
SET a.balance = balance
WHERE a.id = pid;
SELECT
  pid;
END
$$

DELIMITER ;

--
-- Create table `enrollment`
--
CREATE TABLE enrollment (
  id INT(11) NOT NULL AUTO_INCREMENT,
  studentsid INT(11) DEFAULT NULL,
  schoolyear VARCHAR(255) DEFAULT NULL,
  dateenrolled DATE DEFAULT NULL,
  classid INT(11) DEFAULT NULL,
  status INT(11) DEFAULT NULL,
  PRIMARY KEY (id)
)
ENGINE = INNODB,
AUTO_INCREMENT = 48,
AVG_ROW_LENGTH = 16384,
CHARACTER SET latin1,
COLLATE latin1_swedish_ci;

DELIMITER $$

--
-- Create procedure `sp_enrollment_retrieve`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE sp_enrollment_retrieve( sid INT )
BEGIN
SELECT
  a.*,
  (SELECT
      SUM(b.balance)
    FROM payments b
    WHERE b.enrollmentid = a.id
    GROUP BY b.enrollmentid) AS balance
FROM enrollment a
WHERE a.studentsid = sid;
END
$$

--
-- Create procedure `sp_enroll`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE sp_enroll( eid INT )
BEGIN
UPDATE enrollment a
SET a.status = 1
WHERE a.id = eid;
SELECT
  eid AS id;
END
$$

DELIMITER ;

--
-- Create table `sections`
--
CREATE TABLE sections (
  id INT(11) NOT NULL AUTO_INCREMENT,
  sectionname VARCHAR(50) DEFAULT NULL,
  classid INT(11) DEFAULT NULL,
  average INT(11) DEFAULT NULL,
  PRIMARY KEY (id)
)
ENGINE = INNODB,
AUTO_INCREMENT = 12,
AVG_ROW_LENGTH = 1820,
CHARACTER SET latin1,
COLLATE latin1_swedish_ci;

DELIMITER $$

--
-- Create procedure `sp_section_store`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE sp_section_store( id INT, sectionane varchar( 50 ), classid INT, average INT )
BEGIN
  IF( id ) THEN
UPDATE sections a
SET a.sectionname = sectionane,
    a.average = average
WHERE a.id = id;
SELECT
  id;
ELSE
  IF( EXISTS( SELECT
    *
  FROM sections a
  WHERE a.sectionname = sectionane)) THEN
SELECT
  -1 AS id;
ELSE
INSERT INTO sections
  VALUES (0, sectionane, classid, average);
SELECT
  LAST_INSERT_ID() AS id;
END IF;
END IF;
END
$$

--
-- Create procedure `sp_section_retrieve`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE sp_section_retrieve( classid INT )
BEGIN
SELECT
  *
FROM sections a
WHERE a.classid = classid;
END
$$

--
-- Create procedure `sp_section_remove`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE sp_section_remove( sid INT )
BEGIN
DELETE
  FROM sections
WHERE id = sid;
END
$$

DELIMITER ;

--
-- Create table `classes`
--
CREATE TABLE classes (
  id INT(11) NOT NULL AUTO_INCREMENT,
  classname VARCHAR(50) DEFAULT NULL,
  bookprice FLOAT DEFAULT 0,
  PRIMARY KEY (id)
)
ENGINE = INNODB,
AUTO_INCREMENT = 76,
AVG_ROW_LENGTH = 1489,
CHARACTER SET latin1,
COLLATE latin1_swedish_ci;

DELIMITER $$

--
-- Create procedure `sp_statement_related`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE sp_statement_related( eid INT, studentsid INT )
BEGIN
SELECT
  a.*,
  a.id AS e_id,
  b.*,
  b.id AS c_id,
  c.*,
  c.id AS s_id
FROM enrollment a
  JOIN classes b
    ON b.id = a.classid
  JOIN students c
    ON c.id = a.studentsid
WHERE a.id != eid
AND c.id = studentsid;
END
$$

--
-- Create procedure `sp_statement_of_account`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE sp_statement_of_account( eid INT )
BEGIN
SELECT
  a.*,
  a.id AS e_id,
  a.status AS enrollment_status,
  b.*,
  b.id AS c_id,
  c.*,
  c.id AS s_id
FROM enrollment a
  JOIN classes b
    ON b.id = a.classid
  JOIN students c
    ON c.id = a.studentsid
WHERE a.id = eid;
END
$$

--
-- Create procedure `sp_enroll_student`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE sp_enroll_student( studentsid INT, schoolyear varchar(50), classid INT )
BEGIN
  DECLARE enrollment_id INT;
INSERT INTO enrollment (studentsid, schoolyear, dateenrolled, classid, status)
  VALUES (studentsid, schoolyear, NOW(), classid, 0);
  SET enrollment_id = LAST_INSERT_ID();
INSERT INTO payments
  VALUES
  ## TUITION FEE
  (0, enrollment_id, (SELECT payment FROM pricing WHERE id = 1), (SELECT price FROM pricing WHERE id = 1), (SELECT discount FROM pricing WHERE id = 1), (SELECT availability FROM pricing WHERE id = 1), (SELECT (price * 4) FROM pricing WHERE id = 1)),
  ## MISCELLANEOUS FEE
  (0, enrollment_id, (SELECT payment FROM pricing WHERE id = 2), (SELECT price FROM pricing WHERE id = 2), (SELECT discount FROM pricing WHERE id = 2), (SELECT availability FROM pricing WHERE id = 2), (SELECT price FROM pricing WHERE id = 2)),
  ## BOOKS
  (0, enrollment_id, ('BOOKS'), (SELECT bookprice FROM classes WHERE id = classid), 0, '', (SELECT bookprice FROM classes WHERE id = classid));
SELECT
  enrollment_id AS id,
  NOW() AS datenow;
END
$$

--
-- Create procedure `sp_class_store`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE sp_class_store( id INT, classname varchar( 50 ) )
BEGIN
  IF( id ) THEN
UPDATE classes a
SET a.classname = classname
WHERE a.id = id;
SELECT
  id;
ELSE
  IF( EXISTS( SELECT
    *
  FROM classes a
  WHERE a.classname = classname)) THEN
SELECT
  -1 AS id;
ELSE
INSERT INTO classes
  VALUES (0, classname, 0);
SELECT
  LAST_INSERT_ID() AS id;
END IF;
END IF;
END
$$

--
-- Create procedure `sp_class_retrieve`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE sp_class_retrieve()
BEGIN
SELECT
  *
FROM classes;
END
$$

--
-- Create procedure `sp_class_remove`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE sp_class_remove( cid INT )
BEGIN
DELETE classes, sections
  FROM classes
    LEFT JOIN sections
      ON sections.classid = classes.id
WHERE classes.id = cid;
END
$$

--
-- Create procedure `sp_class_books_pricing`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE sp_class_books_pricing( id INT, bookprice FLOAT )
BEGIN
UPDATE classes a
SET a.bookprice = bookprice
WHERE a.id = id;
SELECT
  1;
END
$$

--
-- Create procedure `sp_user_retrieve`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE sp_user_retrieve( uid INT )
BEGIN
SELECT
  a.id,
  a.fname,
  a.mname,
  a.lname,
  a.username,
  a.role,
  a.status
FROM users a
WHERE a.id != uid;
END
$$

--
-- Create procedure `sp_user_login`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE sp_user_login(IN `username` VARCHAR(50), IN `password` VARCHAR(50))
BEGIN
IF EXISTS( SELECT
    a.*
  FROM UserSession a
  WHERE (a.username = username
  AND a.password = MD5(password))
  AND (a.status = 1)) THEN
SELECT
  a.fname,
  a.mname,
  a.lname,
  a.username,
  a.role,
  a.id,
  a.sessionid,
  a.status
FROM UserSession a
WHERE (a.username = username
AND a.password = MD5(password))
AND (a.status = 1);
ELSE
SELECT
  1 AS not_found;
END IF;
END
$$

--
-- Create procedure `sp_requirements_retrieve`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE sp_requirements_retrieve( id INT )
BEGIN
SELECT
  a.requirement,
  a.status,
  a.id
FROM requirements a
WHERE a.studentsid = id;
END
$$

DELIMITER ;

-- 
-- Dumping data for table users
--
INSERT INTO users VALUES
(25, 'Mikamo', 'Zero', 'Administrator', 'admin', '21232f297a57a5a743894a0e4a801fc3', 0, 1),
(26, 'Kristine Jane', 'Tirol', 'Degamo', 'kristine', '81dc9bdb52d04dc20036dbd8313ed055', 2, 1);

-- 
-- Dumping data for table transactions
--
-- Table v1app.transactions does not contain any data (it is empty)

-- 
-- Dumping data for table students
--
INSERT INTO students VALUES
(186, '2019429186', 'Jelah', 'Singson', 'Cajes', '', '2019-04-17', 'Female', 'Basak', 'Basak', 'Cebu', '6017', 'Vivian Mei', 'Singson', 'Pasayon', 'NA', 'NA', 1),
(187, '2019429187', 'Hazel', 'Singson', 'Ladion', '', '2019-04-16', 'Female', 'Basak', 'Basak', 'Cebu', '6015', 'Vivian', 'Singson', 'Pasayon', 'NA', 'NA', 1),
(188, '2019429188', 'Kristine', 'Tirol', 'Degamo', '', '2019-04-23', 'Female', 'Basak', 'Basak', 'Cebu', '6015', 'Teresita', 'Tirol', 'Degamo', 'NA', 'NA', 1),
(189, '2019429189', 'Hazel', 'Ladion', 'Cajes', '', '2019-04-23', 'Female', 'Basak', 'Basak', 'Cebu', '6015', 'Vivian Mei', 'Singson', 'Pasayon', 'NA', 'NA', 1),
(190, '2019429190', 'Kisha', 'Tirol', 'Degamo', '', '2019-04-23', 'Female', 'Basak', 'Basak', 'Cebu', '6017', 'Teresita', 'Tirol', 'Degamo', 'NA', 'NA', 1),
(191, '2019429191', 'Jezel', 'Tirol', 'Degamo', 'Jr', '2019-04-24', 'Female', 'Basak', 'Basak', 'Cebu', '6017', 'Teresita', 'Tirol', 'Degamo', 'NA', 'NA', 1),
(192, '2019429192', 'Prince Lhian Rey', 'Tirol', 'Degamo', '', '2019-04-09', 'Female', 'Basak', 'Basak', 'Cebu', '6017', 'Hazel', 'Tirol', 'Degamo', 'NA', 'NA', 1),
(193, '2019429193', 'Maxie', 'Tirol', 'Degamo', '', '2019-04-23', 'Female', 'Basak', 'Basak', 'Cebu', '6017', 'Hazel', 'Tirol', 'Degamo', 'NA', 'NA', 1);

-- 
-- Dumping data for table sections
--
INSERT INTO sections VALUES
(1, 'Earth', 49, 75),
(2, 'Jupiter', 49, 80),
(3, 'Saturn', 50, 80),
(4, 'Mercury', 49, 75),
(5, 'Rose', 50, 80),
(6, 'Honest', 51, 80),
(7, 'Responsible', 51, 89),
(8, 'diamond', 52, 90),
(9, 'gold', 52, 87),
(10, 'Cat', 53, 75),
(11, 'Dog', 53, 80);

-- 
-- Dumping data for table requirements
--
INSERT INTO requirements VALUES
(86, 'NSO', 1, 86),
(87, 'Birth Certificate', 1, 86),
(90, 'NSO', 1, 87),
(91, 'Birth Certificate', 0, 87),
(92, 'NSO', 1, 88),
(93, 'Birth Certificate', 0, 88),
(94, 'NSO', 0, 89),
(95, 'Birth Certificate', 0, 89),
(96, 'NSO', 0, 90),
(97, 'Birth Certificate', 0, 90),
(98, 'NSO', 0, 91),
(99, 'Birth Certificate', 0, 91),
(100, 'NSO', 0, 92),
(101, 'Birth Certificate', 0, 92),
(102, 'NSO', 0, 93),
(103, 'Birth Certificate', 0, 93),
(104, 'NSO', 0, 94),
(105, 'Birth Certificate', 0, 94),
(106, 'NSO', 0, 95),
(107, 'Birth Certificate', 0, 95),
(108, 'NSO', 0, 96),
(109, 'Birth Certificate', 0, 96),
(110, 'NSO', 0, 97),
(111, 'Birth Certificate', 0, 97),
(112, 'NSO', 0, 98),
(113, 'Birth Certificate', 0, 98),
(114, 'NSO', 0, 99),
(115, 'Birth Certificate', 0, 99),
(116, 'NSO', 0, 100),
(117, 'Birth Certificate', 0, 100),
(118, 'NSO', 0, 101),
(119, 'Birth Certificate', 0, 101),
(120, 'NSO', 0, 102),
(121, 'Birth Certificate', 0, 102),
(122, 'NSO', 0, 103),
(123, 'Birth Certificate', 0, 103),
(124, 'NSO', 0, 104),
(125, 'Birth Certificate', 0, 104),
(126, 'NSO', 0, 105),
(127, 'Birth Certificate', 0, 105),
(128, 'NSO', 0, 106),
(129, 'Birth Certificate', 0, 106),
(130, 'NSO', 0, 107),
(131, 'Birth Certificate', 0, 107),
(132, 'NSO', 0, 108),
(133, 'Birth Certificate', 0, 108),
(134, 'NSO', 0, 109),
(135, 'Birth Certificate', 0, 109),
(136, 'NSO', 1, 110),
(137, 'Birth Certificate', 1, 110),
(138, 'Report Card', 1, 110),
(139, 'NSO', 1, 111),
(140, 'Birth Certificate', 1, 111),
(141, 'Report Card', 1, 111),
(142, 'NSO', 1, 112),
(143, 'Birth Certificate', 1, 112),
(144, 'Report Card', 1, 112),
(145, 'NSO', 1, 113),
(146, 'Birth Certificate', 1, 113),
(147, 'Report Card', 1, 113),
(148, 'NSO', 1, 114),
(149, 'Birth Certificate', 1, 114),
(150, 'Report Card', 1, 114),
(151, 'NSO', 1, 115),
(152, 'Birth Certificate', 1, 115),
(153, 'Report Card', 1, 115),
(154, 'NSO', 1, 116),
(155, 'Birth Certificate', 1, 116),
(156, 'Report Card', 1, 116),
(157, 'NSO', 1, 117),
(158, 'Birth Certificate', 1, 117),
(159, 'Report Card', 1, 117),
(160, 'NSO', 1, 118),
(161, 'Birth Certificate', 1, 118),
(162, 'Report Card', 1, 118),
(163, 'NSO', 1, 119),
(164, 'Birth Certificate', 1, 119),
(165, 'Report Card', 1, 119),
(166, 'NSO', 1, 120),
(167, 'Birth Certificate', 1, 120),
(168, 'Report Card', 1, 120),
(169, 'NSO', 1, 121),
(170, 'Birth Certificate', 1, 121),
(171, 'Report Card', 1, 121),
(172, 'NSO', 1, 122),
(173, 'Birth Certificate', 1, 122),
(174, 'Report Card', 1, 122),
(175, 'NSO', 1, 123),
(176, 'Birth Certificate', 1, 123),
(177, 'Report Card', 1, 123),
(178, 'NSO', 1, 124),
(179, 'Birth Certificate', 1, 124),
(180, 'Report Card', 1, 124),
(181, 'NSO', 1, 125),
(182, 'Birth Certificate', 1, 125),
(183, 'Report Card', 1, 125),
(184, 'NSO', 1, 126),
(185, 'Birth Certificate', 1, 126),
(186, 'Report Card', 1, 126),
(187, 'NSO', 1, 127),
(188, 'Birth Certificate', 1, 127),
(189, 'Report Card', 1, 127),
(190, 'NSO', 1, 128),
(191, 'Birth Certificate', 1, 128),
(192, 'Report Card', 1, 128),
(193, 'NSO', 1, 129),
(194, 'Birth Certificate', 1, 129),
(195, 'Report Card', 1, 129),
(196, 'NSO', 1, 130),
(197, 'Birth Certificate', 1, 130),
(198, 'Report Card', 1, 130),
(199, 'NSO', 1, 131),
(200, 'Birth Certificate', 1, 131),
(201, 'Report Card', 1, 131),
(202, 'NSO', 1, 132),
(203, 'Birth Certificate', 1, 132),
(204, 'Report Card', 1, 132),
(205, 'NSO', 1, 133),
(206, 'Birth Certificate', 1, 133),
(207, 'Report Card', 1, 133),
(208, 'NSO', 1, 134),
(209, 'Birth Certificate', 1, 134),
(210, 'Report Card', 1, 134),
(211, 'NSO', 1, 135),
(212, 'Birth Certificate', 1, 135),
(213, 'Report Card', 1, 135),
(214, 'NSO', 1, 136),
(215, 'Birth Certificate', 1, 136),
(216, 'Report Card', 1, 136),
(217, 'NSO', 1, 137),
(218, 'Birth Certificate', 1, 137),
(219, 'Report Card', 1, 137),
(220, 'NSO', 1, 138),
(221, 'Birth Certificate', 1, 138),
(222, 'Report Card', 1, 138),
(223, 'NSO', 1, 139),
(224, 'Birth Certificate', 1, 139),
(225, 'Report Card', 1, 139),
(226, 'NSO', 1, 140),
(227, 'Birth Certificate', 1, 140),
(228, 'Report Card', 1, 140),
(229, 'NSO', 1, 141),
(230, 'Birth Certificate', 1, 141),
(231, 'Report Card', 1, 141),
(232, 'NSO', 1, 142),
(233, 'Birth Certificate', 1, 142),
(234, 'Report Card', 1, 142),
(235, 'NSO', 1, 143),
(236, 'Birth Certificate', 1, 143),
(237, 'Report Card', 1, 143),
(238, 'NSO', 1, 144),
(239, 'Birth Certificate', 1, 144),
(240, 'Report Card', 1, 144),
(241, 'NSO', 1, 145),
(242, 'Birth Certificate', 1, 145),
(243, 'Report Card', 1, 145),
(244, 'NSO', 1, 146),
(245, 'Birth Certificate', 1, 146),
(246, 'Report Card', 1, 146),
(247, 'NSO', 1, 147),
(248, 'Birth Certificate', 1, 147),
(249, 'Report Card', 1, 147),
(250, 'NSO', 1, 148),
(251, 'Birth Certificate', 1, 148),
(252, 'Report Card', 1, 148),
(253, 'NSO', 1, 149),
(254, 'Birth Certificate', 1, 149),
(255, 'Report Card', 1, 149),
(256, 'NSO', 1, 150),
(257, 'Birth Certificate', 1, 150),
(258, 'Report Card', 1, 150),
(259, 'NSO', 1, 151),
(260, 'Birth Certificate', 1, 151),
(261, 'Report Card', 1, 151),
(262, 'NSO', 1, 152),
(263, 'Birth Certificate', 1, 152),
(264, 'Report Card', 1, 152),
(265, 'NSO', 1, 153),
(266, 'Birth Certificate', 1, 153),
(267, 'Report Card', 1, 153),
(268, 'NSO', 1, 154),
(269, 'Birth Certificate', 1, 154),
(270, 'Report Card', 1, 154),
(271, 'NSO', 1, 155),
(272, 'Birth Certificate', 1, 155),
(273, 'Report Card', 1, 155),
(274, 'NSO', 1, 156),
(275, 'Birth Certificate', 1, 156),
(276, 'Report Card', 1, 156),
(277, 'NSO', 1, 157),
(278, 'Birth Certificate', 1, 157),
(279, 'Report Card', 1, 157),
(280, 'NSO', 1, 158),
(281, 'Birth Certificate', 1, 158),
(282, 'Report Card', 1, 158),
(283, 'NSO', 1, 159),
(284, 'Birth Certificate', 1, 159),
(285, 'Report Card', 1, 159),
(286, 'NSO', 1, 160),
(287, 'Birth Certificate', 1, 160),
(288, 'Report Card', 1, 160),
(289, 'NSO', 1, 161),
(290, 'Birth Certificate', 1, 161),
(291, 'Report Card', 1, 161),
(292, 'NSO', 1, 162),
(293, 'Birth Certificate', 1, 162),
(294, 'Report Card', 1, 162),
(295, 'NSO', 1, 163),
(296, 'Birth Certificate', 1, 163),
(297, 'Report Card', 1, 163),
(298, 'NSO', 1, 164),
(299, 'Birth Certificate', 1, 164),
(300, 'Report Card', 1, 164),
(301, 'NSO', 1, 165),
(302, 'Birth Certificate', 1, 165),
(303, 'Report Card', 1, 165),
(304, 'NSO', 1, 166),
(305, 'Birth Certificate', 1, 166),
(306, 'Report Card', 1, 166),
(307, 'NSO', 1, 167),
(308, 'Birth Certificate', 1, 167),
(309, 'Report Card', 1, 167),
(310, 'NSO', 1, 168),
(311, 'Birth Certificate', 1, 168),
(312, 'Report Card', 1, 168),
(313, 'NSO', 1, 169),
(314, 'Birth Certificate', 1, 169),
(315, 'Report Card', 1, 169),
(316, 'NSO', 1, 170),
(317, 'Birth Certificate', 1, 170),
(318, 'Report Card', 1, 170),
(319, 'NSO', 1, 171),
(320, 'Birth Certificate', 1, 171),
(321, 'Report Card', 1, 171),
(322, 'NSO', 1, 172),
(323, 'Birth Certificate', 1, 172),
(324, 'Report Card', 1, 172),
(325, 'NSO', 1, 173),
(326, 'Birth Certificate', 1, 173),
(327, 'Report Card', 1, 173),
(328, 'NSO', 1, 174),
(329, 'Birth Certificate', 1, 174),
(330, 'Report Card', 1, 174),
(331, 'NSO', 1, 175),
(332, 'Birth Certificate', 1, 175),
(333, 'Report Card', 1, 175),
(334, 'NSO', 1, 176),
(335, 'Birth Certificate', 1, 176),
(336, 'Report Card', 1, 176),
(337, 'NSO', 1, 177),
(338, 'Birth Certificate', 1, 177),
(339, 'Report Card', 1, 177),
(340, 'NSO', 1, 178),
(341, 'Birth Certificate', 1, 178),
(342, 'Report Card', 1, 178),
(343, 'NSO', 1, 179),
(344, 'Birth Certificate', 1, 179),
(345, 'Report Card', 1, 179),
(346, 'NSO', 1, 180),
(347, 'Birth Certificate', 1, 180),
(348, 'Report Card', 1, 180),
(349, 'NSO', 1, 181),
(350, 'Birth Certificate', 1, 181),
(351, 'Report Card', 1, 181),
(352, 'NSO', 1, 182),
(353, 'Birth Certificate', 1, 182),
(354, 'Report Card', 1, 182),
(355, 'NSO', 1, 183),
(356, 'Birth Certificate', 1, 183),
(357, 'Report Card', 1, 183),
(358, 'NSO', 1, 184),
(359, 'Birth Certificate', 1, 184),
(360, 'Report Card', 1, 184),
(361, 'NSO', 1, 185),
(362, 'Birth Certificate', 1, 185),
(363, 'Report Card', 1, 185),
(364, 'NSO', 1, 186),
(365, 'Birth Certificate', 1, 186),
(366, 'Report Card', 1, 186),
(367, 'NSO', 1, 187),
(368, 'Birth Certificate', 1, 187),
(369, 'Report Card', 1, 187),
(370, 'NSO', 1, 188),
(371, 'Birth Certificate', 1, 188),
(372, 'Report Card', 1, 188),
(373, 'NSO', 1, 189),
(374, 'Birth Certificate', 1, 189),
(375, 'Report Card', 1, 189),
(376, 'NSO', 1, 190),
(377, 'Birth Certificate', 1, 190),
(378, 'Report Card', 1, 190),
(379, 'NSO', 1, 191),
(380, 'Birth Certificate', 1, 191),
(381, 'Report Card', 1, 191),
(382, 'NSO', 1, 192),
(383, 'Birth Certificate', 1, 192),
(384, 'Report Card', 1, 192),
(385, 'NSO', 1, 193),
(386, 'Birth Certificate', 1, 193),
(387, 'Report Card', 1, 193);

-- 
-- Dumping data for table records
--
-- Table v1app.records does not contain any data (it is empty)

-- 
-- Dumping data for table pricing
--
INSERT INTO pricing VALUES
(1, 'TUITION FEE', 1700, 5, '', ''),
(2, 'MISCELLANEOUS FEE', 5000, 0, '2019-05-10', '');

-- 
-- Dumping data for table payments
--
INSERT INTO payments VALUES
(53, 47, 'TUITION FEE', 1700, 5, '', 6800),
(54, 47, 'MISCELLANEOUS FEE', 5000, 0, '2019-05-10', 5000),
(55, 47, 'BOOKS', 2200, 0, '', 2200);

-- 
-- Dumping data for table metas
--
INSERT INTO metas VALUES
(4, 'NSO', 1, 'requirement'),
(15, 'Birth Certificate', 1, 'requirement'),
(52, 'English', 0, 'subject'),
(53, 'Jundell Q. Agbo', 1, 'teacher'),
(54, 'Kristine Jane T. Degamo', 1, 'teacher'),
(55, 'Math', 0, 'subject'),
(56, 'Filipino', 0, 'subject'),
(57, 'Mapeh', 0, 'subject'),
(58, 'Science', 0, 'subject'),
(59, 'Report Card', 1, 'requirement'),
(60, 'Hikasi', 0, 'subject');

-- 
-- Dumping data for table enrollment
--
INSERT INTO enrollment VALUES
(47, 189, '2019-2020', '2019-05-03', 64, 0);

-- 
-- Dumping data for table classes
--
INSERT INTO classes VALUES
(63, 'Nursery', 2000),
(64, 'K-1', 2200),
(65, 'K-2', 2800),
(66, 'Grade 1', 4200),
(67, 'Grade 2', 4350),
(68, 'Grade 3', 4650),
(69, 'Grade 4', 4855),
(70, 'Grade 5', 5150),
(71, 'Grade 6', 5150),
(72, 'Grade 7', 5200),
(73, 'Grade 8', 5200),
(74, 'Grade 9', 5250),
(75, 'Grade 10', 5250);

-- 
-- Restore previous SQL mode
-- 
/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;

-- 
-- Enable foreign keys
-- 
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;